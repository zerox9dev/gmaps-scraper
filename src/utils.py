# --------------------------------------------------------------------------
# –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ —Ä–æ–±–æ—Ç–∏ –∑ –≤–µ–±-—Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏
# Utilities for logging and web page interactions
# --------------------------------------------------------------------------

import logging
import sys
from playwright.sync_api import Page


class ColoredFormatter(logging.Formatter):
    # --------------------------------------------------------------------------
    # –ö–æ–ª—å–æ—Ä–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç–µ—Ä –ª–æ–≥—ñ–≤ –∑ —ñ–∫–æ–Ω–∫–∞–º–∏
    # Colored log formatter with icons
    # --------------------------------------------------------------------------
    """Colored log formatter with icons"""
    
    # --------------------------------------------------------------------------
    # –ö–æ–¥–∏ –∫–æ–ª—å–æ—Ä—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    # Color codes for different log levels
    # --------------------------------------------------------------------------
    COLORS = {
        'DEBUG': '\033[36m',    # –¶–∏–∞–Ω / Cyan
        'INFO': '\033[32m',     # –ó–µ–ª–µ–Ω–∏–π / Green
        'WARNING': '\033[33m',  # –ñ–æ–≤—Ç–∏–π / Yellow
        'ERROR': '\033[31m',    # –ß–µ—Ä–≤–æ–Ω–∏–π / Red
        'CRITICAL': '\033[35m', # –ü—É—Ä–ø—É—Ä–æ–≤–∏–π / Magenta
        'RESET': '\033[0m'      # –°–∫–∏–¥–∞–Ω–Ω—è / Reset
    }
    
    # --------------------------------------------------------------------------
    # –Ü–∫–æ–Ω–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    # Icons for different log levels
    # --------------------------------------------------------------------------
    ICONS = {
        'DEBUG': 'üîç',
        'INFO': '‚úÖ',
        'WARNING': '‚ö†Ô∏è',
        'ERROR': '‚ùå',
        'CRITICAL': 'üö®'
    }
    
    def format(self, record):
        # --------------------------------------------------------------------------
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É —Ç–∞ —ñ–∫–æ–Ω–∫–∏ –¥–ª—è —Ä—ñ–≤–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
        # Get color and icon for the log level
        # --------------------------------------------------------------------------
        color = self.COLORS.get(record.levelname, self.COLORS['RESET'])
        icon = self.ICONS.get(record.levelname, 'üìù')
        reset = self.COLORS['RESET']
        
        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
        # Format time
        time_str = self.formatTime(record, '%H:%M:%S')
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        # Create formatted message
        message = f"{color}{icon} {time_str}{reset} {record.getMessage()}"
        
        return message


def setup_logging():
    # --------------------------------------------------------------------------
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ —ñ–∫–æ–Ω–∫–∞–º–∏
    # Setup colorful logging with icons
    # --------------------------------------------------------------------------
    """Setup colorful logging with icons"""
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ –ª–æ–≥–µ—Ä–∞
    # Create custom logger
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    # Remove default handlers
    for handler in logger.handlers[:]:
        logger.removeHandler(handler)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∫–æ–Ω—Å–æ–ª—ñ –∑ –≤–ª–∞—Å–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç–µ—Ä–æ–º
    # Create console handler with custom formatter
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(ColoredFormatter())
    
    logger.addHandler(console_handler)


def extract_text(page: Page, xpath: str) -> str:
    # --------------------------------------------------------------------------
    # –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ –µ–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏, –æ–±—Ä–æ–±–∫–∞ –∫—ñ–ª—å–∫–æ—Ö –∑–±—ñ–≥—ñ–≤
    # Extract text from page element, handle multiple matches gracefully
    # --------------------------------------------------------------------------
    """Extract text from page element, handle multiple matches gracefully"""
    
    try:
        locator = page.locator(xpath)
        count = locator.count()
        
        if count > 0:
            # –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–ª—å–∫–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, –≤–∑—è—Ç–∏ –ø–µ—Ä—à–∏–π
            # If multiple elements found, take the first one
            if count > 1:
                return locator.first.inner_text()
            else:
                return locator.inner_text()
                
    except Exception as e:
        # –õ–æ–≥—É–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ª–∏—à–µ –¥–ª—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫, –Ω–µ –¥–ª—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        # Only log warning for unexpected errors, not for missing elements
        if "timeout" not in str(e).lower() and "not found" not in str(e).lower():
            logging.debug(f"Could not extract text: {xpath[:50]}...")
    
    return ""
